# Copyright The OpenTelemetry Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Factories for event types described in
https://github.com/open-telemetry/semantic-conventions/blob/main/docs/gen-ai/gen-ai-events.md#system-event.

Hopefully this code can be autogenerated by Weaver once Gen AI semantic conventions are
schematized in YAML and the Weaver tool supports it.
"""

from typing import Optional

from opentelemetry._events import Event
from opentelemetry.semconv._incubating.attributes import gen_ai_attributes
from opentelemetry.trace import SpanContext
from opentelemetry.util.types import AnyValue


def _set_span_context(event: Event, span_context: Optional[SpanContext]):
    if not span_context:
        return
    event.span_id = span_context.span_id
    event.trace_id = span_context.trace_id
    event.trace_flags = span_context.trace_flags


def user_event(
    *,
    gen_ai_system: str,
    # TODO: should I just leave role out since it's not required if "user"
    role: str = "user",
    content: AnyValue,
    span_context: Optional[SpanContext] = None,
) -> Event:
    """Creates a User event
    https://github.com/open-telemetry/semantic-conventions/blob/v1.28.0/docs/gen-ai/gen-ai-events.md#user-event
    """
    event = Event(
        name="gen_ai.user.message",
        attributes={
            gen_ai_attributes.GEN_AI_SYSTEM: gen_ai_system,
        },
        body={
            "role": role,
            "content": content,
        },
    )
    _set_span_context(event, span_context)
    return event


# TODO: add tool_calls once instrumentation supports it
def assistant_event(
    *,
    gen_ai_system: str,
    # TODO: should I just leave role out since it's not required if "assistant"
    role: str = "assistant",
    content: AnyValue,
    span_context: Optional[SpanContext] = None,
) -> Event:
    """Creates an Assistant event
    https://github.com/open-telemetry/semantic-conventions/blob/v1.28.0/docs/gen-ai/gen-ai-events.md#assistant-event
    """
    event = Event(
        name="gen_ai.assistant.message",
        attributes={
            gen_ai_attributes.GEN_AI_SYSTEM: gen_ai_system,
        },
        body={
            "role": role,
            "content": content,
        },
    )
    _set_span_context(event, span_context)
    return event
